# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

# This is a basic linter configuration that will follow the official Dart/Flutter style guide
linter:
  rules:
    # Enforce the use of camelCase for variables and functions
    camel_case_variables: true
    camel_case_types: true
    # Avoid using snake_case (we enforce camelCase instead)
    always_put_control_body_on_new_line: true
    # Enforce underscores for private fields and methods
    private_method: true
    private_members: true
    # Use trailing commas in lists and maps to improve readability
    prefer_trailing_comma: true
    # Enforce const constructors whenever possible
    prefer_const_constructors: true
    # Avoid using `var` (it's better to use a specific type)
    prefer_final_local_variables: true
    # Prefer using `const` for immutable values
    prefer_const_literals_to_create_immutables: true
    # Flag for unnecessary `const` usage (e.g., widget constructors should only be `const` when necessary)
    unnecessary_const: true
    # Enable type-safe coding
    type_annotate_public_apis: true
    # Ensure proper spacing and indentation
    always_specify_types: true
    # Avoid unnecessary commented-out code
    avoid_commenting_out_code: true
    # Ensure that we have no unused imports
    unused_import: true
    # Enforce strong null safety checks
    strong_mode: true
    # Enforce use of async/await in async functions (no `.then()`)
    avoid_async_await: false
